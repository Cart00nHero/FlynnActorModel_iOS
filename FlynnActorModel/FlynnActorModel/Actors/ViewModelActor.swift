//
//  ViewModelActor.swift
//  FlynnActorModel
//
//  Created by YuCheng on 2021/2/11.
//

import Foundation
import Flynn

class ViewModelActor: Actor,ObservableObject {
    private var coutTextBlock: ((String) -> Void)?
    // Our internal data storage. We make sure this is private, so it can only be set
    // by behavior calls (which will ensure safe concurrency)
    private var count: Int = 0 {
        willSet { objectWillChange() }
    }

    // For the data we want to expose to SwiftUI, we provide an unsafe equivalent.
    // The "unsafe" just means that we need to take responsibility for it being
    // concurrency safe, as someone calling model.unsafeUsername this will execute
    // on their thread, possibly at the same time the actor is executing on a
    // different thread.
    private var unsafeCount: String {
        set {
            if let value = Int(newValue) {
                beSetCount(value)
            }
        }
        get { return "\(count)" }
    }

    // Our data is garaunteed to change on a background thread, so we need to ensure
    // that when we tell SwiftUI that our data has changed that it does so on the
    // main thread.
    private func objectWillChange() {
        DispatchQueue.main.async {
            self.objectWillChange.send()
        }
    }

    // Here we define our behaviors. Only behaviors are allowed to write to our
    // private storage, ensuring that we will never have data races.
    private func _beSetCount(_ value: Int) {
        count = value
    }
    private func _beAddCountTextBlock(_ block: @escaping (String?) -> Void) {
        coutTextBlock = block
    }

    override init() {
        super.init()

        // To make this interesting, we are going to change the value periodically. The
        // user can still freely edit the text field while the count is incrementing. The
        // Flynn timer's closure will be run in the same concurrently safe context all
        // actor behaviors run
        Flynn.Timer(timeInterval: 0.5, repeats: true, self) { (_) in
            self.count += 1
            if self.coutTextBlock != nil {
                DispatchQueue.main.async {
                    self.coutTextBlock!("\(self.count)")
                }
            }
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension ViewModelActor {

    @discardableResult
    public func beSetCount(_ value: Int) -> Self {
        unsafeSend { self._beSetCount(value) }
        return self
    }
    @discardableResult
    public func beAddCountTextBlock(_ block: @escaping (String?) -> Void) -> Self {
        unsafeSend { self._beAddCountTextBlock(block) }
        return self
    }

}
